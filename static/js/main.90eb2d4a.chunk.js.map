{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","validate","useState","Math","random","toString","slice","id","touched","setTouched","hasError","trim","isNotValid","url","includes","test","validation","useEffect","prev","htmlFor","classNames","type","placeholder","onFocus","onBlur","initialInputs","initialValidateInputs","NewMovie","onAdd","count","setCount","newMovie","setNewMovie","validateInputs","setValidateInputs","event","target","prevMovie","isEmptyField","Object","values","some","input","isErrorsExists","submitDisabled","onSubmit","preventDefault","prevCount","disabled","App","moviesFromServer","setNewMovies","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.90eb2d4a.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, {\n  ChangeEvent, Dispatch, SetStateAction, useEffect, useState,\n} from 'react';\nimport { IValidation } from '../../types/IValidation';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void,\n  validate: Dispatch<SetStateAction<IValidation>>;\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nconst validation = (url: string, name: string): boolean => {\n  if (!['imgUrl', 'imdbUrl'].includes(name) || !url) {\n    return false;\n  }\n\n  // eslint-disable-next-line max-len\n  const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n  return !pattern.test(url);\n};\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange,\n  validate,\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !value.trim();\n\n  const isNotValid = touched && validation(value.trim(), name);\n\n  useEffect(() => {\n    if (hasError || isNotValid) {\n      validate(prev => ({ ...prev, [name]: true }));\n    }\n  }, [hasError, isNotValid]);\n\n  const onFocus = () => {\n    validate(prev => ({ ...prev, [name]: false }));\n    setTouched(false);\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          name={name}\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': isNotValid || hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={onChange}\n          onFocus={onFocus}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n      {hasError && <p className=\"help is-danger\">{`${label} is required`}</p>}\n      {isNotValid && <p className=\"help is-danger\">{`${label} is not valid`}</p>}\n    </div>\n  );\n};\n","import {\n  ChangeEvent, FC, FormEvent, useState,\n} from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\nimport { IValidation } from '../../types/IValidation';\n\ninterface Props {\n  onAdd: (newMovie: Movie) => void;\n}\n\nconst initialInputs = {\n  title: '',\n  description: '',\n  imgUrl: '',\n  imdbUrl: '',\n  imdbId: '',\n};\n\nconst initialValidateInputs: IValidation = {\n  title: false,\n  description: false,\n  imgUrl: false,\n  imdbUrl: false,\n  imdbId: false,\n};\n\nexport const NewMovie: FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [newMovie, setNewMovie] = useState(initialInputs);\n  const [validateInputs, setValidateInputs] = useState<IValidation>(\n    initialValidateInputs,\n  );\n\n  const onChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n\n    setNewMovie(prevMovie => ({ ...prevMovie, [name]: value }));\n  };\n\n  const onSubmit = (event: FormEvent) => {\n    event.preventDefault();\n\n    onAdd(newMovie);\n    setNewMovie(initialInputs);\n    setCount(prevCount => prevCount + 1);\n  };\n\n  const {\n    title, description, imdbUrl, imgUrl, imdbId,\n  } = newMovie;\n\n  const isEmptyField = Object.values(newMovie).some(input => !input.trim());\n  const isErrorsExists = Object.values(validateInputs).some(input => input);\n  const submitDisabled = isEmptyField || isErrorsExists;\n\n  return (\n    <form className=\"NewMovie\" key={count} onSubmit={onSubmit}>\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={onChange}\n        validate={setValidateInputs}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={onChange}\n        validate={setValidateInputs}\n        required\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={onChange}\n        validate={setValidateInputs}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={onChange}\n        validate={setValidateInputs}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={onChange}\n        validate={setValidateInputs}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={submitDisabled}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setNewMovies] = useState(moviesFromServer);\n\n  const addNewMovie = (newMovie: Movie) => {\n    setNewMovies(prevMovies => ([\n      ...prevMovies,\n      newMovie,\n    ]));\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addNewMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}